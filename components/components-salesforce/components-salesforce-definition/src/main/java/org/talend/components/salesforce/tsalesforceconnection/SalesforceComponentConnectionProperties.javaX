// ============================================================================
//
// Copyright (C) 2006-2017 Talend Inc. - www.talend.com
//
// This source code is available under agreement available at
// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
//
// You should have received a copy of the agreement
// along with this program; if not, write to Talend SA
// 9 rue Pages 92150 Suresnes, France
//
// ============================================================================
package org.talend.components.salesforce.tsalesforceconnection;

import static org.talend.components.salesforce.SalesforceDatastoreProperties2.OAUTH;
import static org.talend.components.salesforce.SalesforceDatastoreProperties2.USERPASSWORD;
import static org.talend.components.salesforce.SalesforceDefinition.SOURCE_OR_SINK_CLASS;
import static org.talend.components.salesforce.SalesforceDefinition.USE_CURRENT_JVM_PROPS;
import static org.talend.components.salesforce.SalesforceDefinition.getSandboxedInstance;
import static org.talend.daikon.properties.presentation.Widget.widget;

import org.talend.components.api.exception.ComponentException;
import org.talend.components.api.properties.ComponentReferenceProperties;
import org.talend.components.common.datastore.DatastoreProperties;
import org.talend.components.salesforce.SalesforceDatastoreProperties2;
import org.talend.components.salesforce.SalesforceProvideDatastoreProperties;
import org.talend.components.salesforce.common.SalesforceRuntimeSourceOrSink;
import org.talend.daikon.properties.ValidationResult;
import org.talend.daikon.properties.ValidationResultMutable;
import org.talend.daikon.properties.presentation.Form;
import org.talend.daikon.properties.presentation.Widget;
import org.talend.daikon.sandbox.SandboxedInstance;
import org.talend.daikon.serialize.PostDeserializeSetup;
import org.talend.daikon.serialize.migration.SerializeSetVersion;

public class SalesforceComponentConnectionProperties extends SalesforceDatastoreProperties2
        implements SalesforceProvideDatastoreProperties, SerializeSetVersion, DatastoreProperties {

    public ComponentReferenceProperties<SalesforceDatastoreProperties2> referencedComponent = new ComponentReferenceProperties<>(
            "referencedComponent", TSalesforceConnectionDefinition.COMPONENT_NAME);

    public SalesforceComponentConnectionProperties(String name) {
        super(name);
    }

    @Override
    public void setupLayout() {
        super.setupLayout();

        // A form for a reference to a connection, used in a tSalesforceInput for example
        Form refForm = Form.create(this, Form.REFERENCE);
        Widget compListWidget = widget(referencedComponent).setWidgetType(Widget.COMPONENT_REFERENCE_WIDGET_TYPE);
        refForm.addRow(compListWidget);
        refForm.addRow(getForm(Form.MAIN));
    }

    @Override
    public void afterLoginType() {
        refreshLayout(getForm(Form.MAIN));
        refreshLayout(getForm(FORM_WIZARD));
        refreshLayout(getForm(Form.ADVANCED));
    }

    @Override
    public void afterReferencedComponent() {
        refreshLayout(getForm(Form.MAIN));
        refreshLayout(getForm(Form.REFERENCE));
        refreshLayout(getForm(Form.ADVANCED));
    }

    @Override
    public void afterReuseSession() {
        refreshLayout(getForm(Form.ADVANCED));
    }

    @Override
    public void afterBulkConnection() {
        refreshLayout(getForm(Form.ADVANCED));
    }

    @Override
    public ValidationResult validateTestConnection() throws Exception {
        try (SandboxedInstance sandboxedInstance = getSandboxedInstance(SOURCE_OR_SINK_CLASS, USE_CURRENT_JVM_PROPS)) {
            SalesforceRuntimeSourceOrSink ss = (SalesforceRuntimeSourceOrSink) sandboxedInstance.getInstance();
            ss.initialize(null, SalesforceComponentConnectionProperties.this);
            ValidationResultMutable vr = new ValidationResultMutable(ss.validate(null));
            if (vr.getStatus() == ValidationResult.Result.OK) {
                vr.setMessage(MESSAGES.getMessage("connection.success"));
                getForm(FORM_WIZARD).setAllowForward(true);
            } else {
                getForm(FORM_WIZARD).setAllowForward(false);
            }
            return vr;
        }
    }

    @Override
    public void refreshLayout(Form form) {
        super.refreshLayout(form);

        String refComponentIdValue = getReferencedComponentId();
        boolean useOtherConnection = refComponentIdValue != null
                && refComponentIdValue.startsWith(TSalesforceConnectionDefinition.COMPONENT_NAME);
        if (form.getName().equals(Form.MAIN) || form.getName().equals(FORM_WIZARD)) {
            if (useOtherConnection) {
                form.getWidget(loginType.getName()).setHidden(true);
                form.getWidget(OAUTH).setHidden(true);
                form.getWidget(USERPASSWORD).setHidden(true);
            } else {
                form.getWidget(loginType.getName()).setHidden(false);
                String endpointValue = endpoint.getValue();
                switch (loginType.getValue()) {
                case Basic:
                    form.getWidget(OAUTH).setHidden(true);
                    form.getWidget(USERPASSWORD).setHidden(false);
                    if (endpointValue == null || endpointValue.contains(OAUTH_URL)) {
                        endpoint.setValue(URL);
                    }
                    break;
                case OAuth:
                    form.getWidget(OAUTH).setHidden(false);
                    form.getWidget(USERPASSWORD).setHidden(true);
                    if (endpointValue == null || endpointValue.contains(URL)) {
                        endpoint.setValue(OAUTH_URL);
                    }
                    break;

                default:
                    throw new ComponentException(new Throwable("Enum value should be handled :" + loginType.getValue()));
                }
            }
        }

        if (form.getName().equals(Form.ADVANCED)) {
            if (useOtherConnection) {
                form.setHidden(true);
            } else {
                form.setHidden(false);

                boolean bulkMode = bulkConnection.getValue();
                form.getWidget(httpChunked.getName()).setHidden(bulkMode);
                form.getWidget(httpTraceMessage.getName()).setHidden(!bulkMode);
                boolean isBasicLogin = LoginType.Basic.equals(loginType.getValue());
                form.getWidget(reuseSession.getName()).setVisible(isBasicLogin && !bulkMode);
                form.getWidget(sessionDirectory.getName()).setVisible(isBasicLogin && !bulkMode && reuseSession.getValue());
                form.getWidget(apiVersion.getName()).setHidden(isBasicLogin);

                Form proxyForm = form.getChildForm(proxy.getName());
                if (proxyForm != null) {
                    boolean isUseProxy = proxy.useProxy.getValue();
                    proxyForm.getWidget(proxy.host.getName()).setHidden(!isUseProxy);
                    proxyForm.getWidget(proxy.port.getName()).setHidden(!isUseProxy);
                    proxyForm.getWidget(proxy.userPassword.getName()).setHidden(!isUseProxy);
                }
            }
        }
    }

    @Override
    public SalesforceDatastoreProperties2 getSalesforceDatastoreProperties() {
        return this;
    }

    @Override
    public String getReferencedComponentId() {
        return referencedComponent.componentInstanceId.getStringValue();
    }

    @Override
    public SalesforceDatastoreProperties2 getReferencedConnectionProperties() {
        SalesforceDatastoreProperties2 refProps = referencedComponent.getReference();
        if (refProps != null) {
            return refProps;
        }
        return null;
    }

    @Override
    public int getVersionNumber() {
        return 1;
    }

    @Override
    public boolean postDeserialize(int version, PostDeserializeSetup setup, boolean persistent) {
        boolean migrated = super.postDeserialize(version, setup, persistent);
        if (version < this.getVersionNumber()) {
            if (apiVersion.getValue() == null) {
                apiVersion.setValue("\"34.0\"");
                migrated = true;
            }
        }
        return migrated;
    }

}
